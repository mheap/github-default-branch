#!/usr/bin/env node
(async function () {
  const log = require("debug")("ghdb");
  const { argv } = require("yargs")
    .options({
      pat: { type: "string", description: "GitHub API Token" },
      repo: {
        type: "string",
        description: "The repo to update (format: user/repo)",
      },
      user: {
        type: "string",
        description:
          "Update all repos owned by the provided user (example: my-user)",
      },
      org: {
        type: "string",
        description:
          "Update all repos in the provided org (example: my-org-name)",
      },
      team: {
        type: "string",
        description:
          "Update all repos in the provided team (example: my-team-name), only usable in combination with org parameter",
      },
      "keep-old": {
        type: "boolean",
        default: false,
        description: "Keep the old branch rather than deleting it",
      },
      "dry-run": {
        type: "boolean",
        default: false,
        description: "Output log messages only. Do not make any changes",
      },
      "list-repos-only": {
        type: "boolean",
        default: false,
        description: "List repos that would be affected, then exit",
      },
      "skip-forks": {
        type: "boolean",
        default: false,
        description: "Skips forked repositories",
      },
      old: {
        type: "string",
        default: "master",
        description: "The name of the branch to rename",
      },
      new: {
        type: "string",
        default: "main",
        description: "The new branch name",
      },
      confirm: {
        type: "boolean",
        default: false,
        description: "Run without prompting for confirmation",
      },
      "base-url": {
        type: "string",
        description:
          "Set a custom API base URL for use with GitHub Enterprise (example: https://github.example.com/api/v3)",
      },
      // Plugin needed to use the old /git/refs/ API instead of the newer
      // /git/ref/ API introduced in v2.19.
      // https://developer.github.com/enterprise/2.18/v3/git/refs/
      // https://developer.github.com/enterprise/2.19/v3/git/refs/
      "enterprise-compatibility": {
        type: "boolean",
        default: false,
        description:
          "Load Octokit plugin for improving compatibility with older versions of GitHub Enterprise API (needed for GitHub Enterprise versions before v2.19)",
      },
      // "updateBranchProtectionRule" GraphQL mutation not supported in
      // versions of the API prior to 2.15.
      // https://developer.github.com/enterprise/2.14/v4/mutation/
      // https://developer.github.com/enterprise/2.15/v4/mutation/
      "skip-update-branch-protection": {
        type: "boolean",
        default: false,
        description:
          "Skip updating branch protection (not supported in GitHub Enterprise API versions before v2.15)",
      },
    })
    .example([
      ["$0 --pat <token> --repo user/repo", "Rename master to main"],
      [
        "$0 --pat <token> --repo user/repo --old dev --new develop",
        "Rename dev to develop",
      ],
      [
        "$0 --pat <token> --org my-org-name",
        "Rename all repos owned by an org",
      ],
      [
        "$0 --pat <token> --org my-org-name --team my-team-slug",
        "Rename all repos owned by a team within an org",
      ],
      ["$0 --pat <token> --user my-user", "Rename all repos owned by a user"],
    ]);

  const isDryRun = !!argv.dryRun;

  // Up front validation
  const providedRepoSelectors = [argv.org, argv.user, argv.repo].filter(
    (v) => v
  ).length;

  if (providedRepoSelectors === 0) {
    console.error("❎ You must provide --org, --user or --repo");
    return;
  }

  if (providedRepoSelectors > 1) {
    console.error("❎ Only --org OR --user OR --repo is supported");
    return;
  }

  if (!argv.pat && !process.env.GITHUB_TOKEN) {
    console.error(
      "❎ Provide a GitHub Access Token using --pat <token> or using the GITHUB_TOKEN environment variable"
    );
    return;
  }

  const { Octokit } = require("@octokit/rest");

  const confirmation = require("../src/confirmation");
  const getRepos = require("../src/get-repos");
  const getBranchSha = require("../src/get-branch-sha");
  const createBranch = require("../src/create-branch");
  const removeBranch = require("../src/remove-branch");
  const updateContent = require("../src/update-content");
  const updateBranchProtection = require("../src/branch-protection");

  const old = argv.old || "master";
  const target = argv.new || "main";

  // Make sure they want to do this
  if (!(await confirmation(argv.confirm, old, target))) {
    return;
  }

  let OctokitClass = Octokit;
  if (argv.enterpriseCompatibility) {
    const {
      enterpriseCompatibility,
    } = require("@octokit/plugin-enterprise-compatibility");
    OctokitClass = Octokit.plugin(enterpriseCompatibility);
  }

  let octokitArgs = {
    auth: argv.pat || process.env.GITHUB_TOKEN,
  };

  if (argv.baseUrl) {
    octokitArgs.baseUrl = argv.baseUrl;
  }

  const octokit = new OctokitClass(octokitArgs);

  try {
    const {
      data: {
        rate: { remaining },
      },
    } = await octokit.rateLimit.get();
    log(`You have ${remaining} API requests remaining`);
  } catch (e) {
    // GitHub Enterprise API versions may not support getting the rate
    // limits, so only log this as a warning, rather than treating errors as
    // fatal.
    log(`⚠️  Unable to determine rate limits: ${e.message}\n`);
  }

  const repos = await getRepos(argv, octokit);

  if (argv.listReposOnly) {
    log(repos.join("\n"));
    return;
  }

  for (let r of repos) {
    log(`✏️  Processing ${r}`);

    const [owner, repo] = r.split("/", 2);
    let currentMasterSha;

    try {
      currentMasterSha = await getBranchSha(owner, repo, old, octokit);
    } catch (e) {
      // Typically, this will fail when the old branch, i.e. master, doesn't exist.
      log(`⚠️  Skipping ${r}: ${e.message}\n`);
      continue;
    }

    log(`✏️  Creating branch [${target}] at [${currentMasterSha}]`);

    if (!isDryRun) {
      await createBranch(owner, repo, target, currentMasterSha, octokit);
    }

    // List all PRs
    let pulls = await octokit.paginate(
      "GET /repos/:owner/:repo/pulls",
      {
        owner,
        repo,
        state: "open",
        per_page: 100,
      },
      (response) => response.data
    );

    // Update the target branch for all open PRs
    for (let pr of pulls) {
      if (pr.base.ref != old) {
        continue;
      }

      log(
        `✏️  Updating pull request [#${pr.number}] in [${repo}] from [${pr.base.ref}] to [${target}]`
      );

      if (!isDryRun) {
        await octokit.pulls.update({
          owner,
          repo,
          pull_number: pr.number,
          base: target,
        });
      }
    }

    log(`✏️  Updating default branch to [${target}] in [${repo}]`);

    const {
      data: { default_branch: defaultBranch },
    } = await octokit.repos.get({
      owner,
      repo,
    });

    if (!isDryRun) {
      if (defaultBranch === old) {
        // Update the default branch in the repo
        await octokit.repos.update({
          owner,
          repo,
          // The `name` parameter must be included for compatibility with older
          // GitHub Enterprise API versions:
          // https://github.community/t/cannot-change-default-branch/13728/13
          name: repo,
          default_branch: target,
        });
      } else {
        log(
          `✏️  Default branch is different to 'old' value. Not updating default branch`
        );
      }
    }

    log(`✏️  Changing branch protections`);

    if (!isDryRun && !argv.skipUpdateBranchProtection) {
      await updateBranchProtection(owner, repo, old, target, octokit);
    }

    log(`✏️  Deleting old branch [${old}] in ${repo}`);

    if (!isDryRun) {
      // Remove old branch if required
      if (!argv.keepOld) {
        await removeBranch(owner, repo, old, octokit);
      }
    }

    // Update all content on the branch
    await updateContent({
      owner,
      repo,
      old,
      target,
      octokit,
      isDryRun,
    });

    // Add an empty new line to break up the output for each repo
    log("");
  }

  log("✅ Complete");
})();
